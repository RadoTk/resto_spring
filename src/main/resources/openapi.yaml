openapi: 3.0.3
info:
  title: Restaurant Management API
  description: API for managing restaurant ingredients, dishes and orders
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /ingredients:
    get:
      summary: Get all ingredients with their current prices, price history, stock movements and current available quantity
      parameters:
        - name: priceMinFilter
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: priceMaxFilter
          in: query
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: List of ingredients with full details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientRest'
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
    put:
      summary: Update ingredients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateOrUpdateIngredient'
      responses:
        '200':
          description: Updated ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientRest'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /ingredients/{ingredientId}/prices:
    put:
      summary: Add new prices to ingredient's price history
      parameters:
        - name: ingredientId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateIngredientPrice'
      responses:
        '200':
          description: Updated ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientRest'
        '404':
          description: Ingredient not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /ingredients/{ingredientId}/stockMovements:
    put:
      summary: Add new stock movements to ingredient's stock history
      parameters:
        - name: ingredientId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateStockMovement'
      responses:
        '200':
          description: Updated ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientRest'
        '404':
          description: Ingredient not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /dishes:
    get:
      summary: Get all dishes with their ingredients, available quantities and current prices
      responses:
        '200':
          description: List of dishes with their details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DishRest'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /dishes/{dishId}/ingredients:
    put:
      summary: Add or update list of ingredients with their respective quantities for a dish
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DishIngredientRequest'
      responses:
        '200':
          description: Updated dish
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishRest'
        '404':
          description: Dish not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /orders/{reference}:
    get:
      summary: Get order by reference with its dishes and their current status
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRest'
        '404':
          description: Order not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /orders/{reference}/dishes:
    put:
      summary: Update order dishes and quantities, with optional status update
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRest'
        '404':
          description: Order not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /orders/{reference}/dishes/{dishId}:
    put:
      summary: Update status of a specific dish in an order
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDishStatusRequest'
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRest'
        '404':
          description: Order or dish not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    IngredientRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        currentPrice:
          type: number
          format: double
        currentStock:
          type: number
          format: double
        prices:
          type: array
          items:
            $ref: '#/components/schemas/PriceRest'
        stockMovements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovementRest'

    DishRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        totalPrice:
          type: number
          format: double
        availableQuantity:
          type: integer
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/DishIngredientRest'

    DishIngredientRest:
      type: object
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientSummaryRest'
        requiredQuantity:
          type: number
          format: double

    IngredientSummaryRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        currentPrice:
          type: number
          format: double
        currentStock:
          type: number
          format: double

    OrderRest:
      type: object
      properties:
        reference:
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        totalAmount:
          type: number
          format: double
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/OrderDishRest'

    OrderDishRest:
      type: object
      properties:
        dish:
          $ref: '#/components/schemas/DishSummaryRest'
        quantity:
          type: integer
        status:
          $ref: '#/components/schemas/DishOrderStatus'

    DishSummaryRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        currentPrice:
          type: number
          format: double

    CreateOrUpdateIngredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name

    CreateIngredientPrice:
      type: object
      properties:
        amount:
          type: number
          format: double
        dateValue:
          type: string
          format: date
      required:
        - amount
        - dateValue

    CreateStockMovement:
      type: object
      properties:
        quantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        movementType:
          $ref: '#/components/schemas/StockMovementType'
      required:
        - quantity
        - unit
        - movementType

    DishIngredientRequest:
      type: object
      properties:
        ingredientId:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
      required:
        - ingredientId
        - quantity

    UpdateOrderRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/OrderDishRequest'
      required:
        - dishes

    OrderDishRequest:
      type: object
      properties:
        dishId:
          type: integer
          format: int64
        quantity:
          type: integer
      required:
        - dishId
        - quantity

    UpdateDishStatusRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DishOrderStatus'
      required:
        - status

    PriceRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        amount:
          type: number
          format: double
        dateValue:
          type: string
          format: date

    StockMovementRest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        type:
          $ref: '#/components/schemas/StockMovementType'
        creationDatetime:
          type: string
          format: date-time

    Unit:
      type: string
      enum:
        - KG
        - L
        - UNIT

    StockMovementType:
      type: string
      enum:
        - IN
        - OUT

    OrderStatus:
      type: string
      enum:
        - CREATED
        - CONFIRMED

    DishOrderStatus:
      type: string
      enum:
        - CREATED
        - CONFIRMED
        - IN_PROGRESS
        - FINISHED
        - DELIVERED 